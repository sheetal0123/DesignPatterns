package velocitymanager.example2;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.velocity.app.Velocity;
import org.apache.velocity.app.VelocityEngine;

import velocitymanager.example1.PetDataClass;
import velocitymanager.example1.PetDomain;
import velocitymanager.example2.pojos.FileFooter;
import velocitymanager.example2.pojos.FileHeader;
import velocitymanager.example2.pojos.MathsDepartmentFooter;
import velocitymanager.example2.pojos.MathsDepartmentHeader;
import velocitymanager.example2.pojos.ScienceDepartmentFooter;
import velocitymanager.example2.pojos.ScienceDepartmentHeader;
import velocitymanager.example2.pojos.StudentsDetails;

import org.apache.commons.lang.StringUtils;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;

public class DataCreationClass {

	/**
	 * This method will create file header data
	 */
	public static FileHeader createFileHeader() {
		Map<String, String> map = ReadDataFromInputFile.readFileHeader();
		
		//update auto-generated fields
		if("autogenerated".equalsIgnoreCase(map.get("CURRENT_DATE")))
			map.put("CURRENT_DATE",  new SimpleDateFormat("dd-MM-yyyy").format(new Date()));
		

		//set file header domain
		FileHeader fileHeader = new FileHeader();
		fileHeader.setTotalDepartmentCount(StringUtils.leftPad(map.get("TOTAL_DEPT_COUNT"), 5, '0'));
		fileHeader.setCurrentDate(StringUtils.leftPad(map.get("CURRENT_DATE"), 40,' '));
		return fileHeader;
	}
	
	/**
	 * This method will create file footer data
	 * 
	 * todo: count, julian date need to calculate
	 */
	public static FileFooter createFileFooter() {
		Map<String, String> map = ReadDataFromInputFile.readFileFooter();

		if("juliandate".equalsIgnoreCase(map.get("JULIAN_DATE")))
			map.put("JULIAN_DATE",Integer.toString(Calendar.getInstance().get(Calendar.DAY_OF_YEAR)));
		
		FileFooter fileFooter = new FileFooter();
		fileFooter.setTotalStudentCount(StringUtils.leftPad(map.get("TOTAL_STUDENT_COUNT"), ReadDataFromInputFile.readStudentData().size(), '0'));
		fileFooter.setJulianDate(StringUtils.leftPad(map.get("JULIAN_DATE"), 40, ' '));
		return fileFooter;
	}
	

	
	public static MathsDepartmentHeader createMathsHeader() {
		Map<String, String> map = ReadDataFromInputFile.readMathsDeptHeader();
		
		MathsDepartmentHeader mathsDepartmentHeader = new MathsDepartmentHeader();
		mathsDepartmentHeader.setDeptName(StringUtils.leftPad(map.get("DEPT_NAME"), 30, ' '));
		mathsDepartmentHeader.setDeptHOD(StringUtils.leftPad(map.get("DEPT_HOD"), 20, ' '));
		mathsDepartmentHeader.setDeptFacultyCount(StringUtils.leftPad(map.get("DEPT_FACULTY_COUNT"), 20, ' '));
		mathsDepartmentHeader.setDeptStartedYear(StringUtils.leftPad(map.get("DEPT_STARTED_YEAR"), 20, ' '));  
		return mathsDepartmentHeader;
	}
	
	public static MathsDepartmentFooter createMathsFooter() {
		Map<String, String> map = ReadDataFromInputFile.readMathsDeptFooter();
		
		MathsDepartmentFooter mathsDepartmentFooter = new MathsDepartmentFooter();
		mathsDepartmentFooter.setDeptCurrentVacancy(StringUtils.leftPad(map.get("DEPT_CURRENT_VACANCY"), 10, '0'));
		mathsDepartmentFooter.setDeptYearlyBudget(StringUtils.leftPad(map.get("DEPT_YR_BUDGET"), 20, '0'));
		return mathsDepartmentFooter;
	}
	
	public static ScienceDepartmentHeader createScienceHeader() {
		Map<String, String> map = ReadDataFromInputFile.readScienceDeptHeader();
		
		ScienceDepartmentHeader sciDepartmentHeader = new ScienceDepartmentHeader();
		sciDepartmentHeader.setDeptName(StringUtils.leftPad(map.get("DEPT_NAME"), 30, ' '));
		sciDepartmentHeader.setDeptHOD(StringUtils.leftPad(map.get("DEPT_HOD"), 20, ' '));
		sciDepartmentHeader.setDeptFacultyCount(StringUtils.leftPad(map.get("DEPT_FACULTY_COUNT"), 20, ' '));
		sciDepartmentHeader.setDeptStartedYear(StringUtils.leftPad(map.get("DEPT_STARTED_YEAR"), 20, ' '));  
		return sciDepartmentHeader;
	}
	
	public static ScienceDepartmentFooter createScienceFooter() {
		Map<String, String> map = ReadDataFromInputFile.readScienceDeptFooter();
		
		ScienceDepartmentFooter scienceDepartmentFooter = new ScienceDepartmentFooter();
		scienceDepartmentFooter.setDeptCurrentVacancy(StringUtils.leftPad(map.get("DEPT_CURRENT_VACANCY"), 10, '0'));
		scienceDepartmentFooter.setDeptYearlyBudget(StringUtils.leftPad(map.get("DEPT_YR_BUDGET"), 20, '0'));
		return scienceDepartmentFooter;
	}
	
	
	
	public static void createStudentMapDeptWise(BasePlaceHolderClass basePlaceHolderClass) {
		Map<String, Map<String, String>> bigmap = ReadDataFromInputFile.readStudentData();
			
		Map<String, Map<String, String>> bigmapMaths = new HashMap<String, Map<String,String>>();
		Map<String, Map<String, String>> bigmapScience = new HashMap<String, Map<String,String>>();
		
		//divide student based on dept
		for(Map<String, String> map: bigmap.values()) {
			if("Mathematics".equalsIgnoreCase(map.get("STUD_DEPT"))) {
				bigmapMaths.put(map.get("STUD_ROLL_NO"), map);
			}else {
				bigmapScience.put(map.get("STUD_ROLL_NO"), map);
			}
		}

		
		List<StudentsDetails> lsOfMathsStudent = new ArrayList<StudentsDetails>();
		List<StudentsDetails> lsOfScienceStudent = new ArrayList<StudentsDetails>();
		
		for(Map<String, String> map: bigmapMaths.values()) {
			StudentsDetails studentDetails = new StudentsDetails();
			studentDetails.setStudRollNo(StringUtils.leftPad(map.get("STUD_ROLL_NO"), 10, '0'));
			studentDetails.setStudFirstName(StringUtils.leftPad(map.get("STUD_FIRST_NAME"), 10, ' '));
			studentDetails.setStudLastName(StringUtils.leftPad(map.get("STUD_LAST_NAME"), 10, ' '));
			studentDetails.setStudSchoolName(StringUtils.leftPad(map.get("STUD_DEPT"), 20, ' '));
			studentDetails.setStudCity(StringUtils.leftPad(map.get("STUD_SCHOOL_NAME"), 20, ' '));
			studentDetails.setStudClassTeacher(StringUtils.leftPad(map.get("STUD_CLASS_TEACHER"), 20, ' '));
			studentDetails.setStudDepartment(StringUtils.leftPad(map.get("STUD_CITY"), 10, ' '));

			lsOfMathsStudent.add(studentDetails);
		}
		

		for(Map<String, String> map: bigmapScience.values()) {
			StudentsDetails studentDetails = new StudentsDetails();
			studentDetails.setStudRollNo(StringUtils.leftPad(map.get("STUD_ROLL_NO"), 10, '0'));
			studentDetails.setStudFirstName(StringUtils.leftPad(map.get("STUD_FIRST_NAME"), 10, ' '));
			studentDetails.setStudLastName(StringUtils.leftPad(map.get("STUD_LAST_NAME"), 10, ' '));
			studentDetails.setStudSchoolName(StringUtils.leftPad(map.get("STUD_DEPT"), 20, ' '));
			studentDetails.setStudCity(StringUtils.leftPad(map.get("STUD_SCHOOL_NAME"), 20, ' '));
			studentDetails.setStudClassTeacher(StringUtils.leftPad(map.get("STUD_CLASS_TEACHER"), 20, ' '));
			studentDetails.setStudDepartment(StringUtils.leftPad(map.get("STUD_CITY"), 10, ' '));

			lsOfScienceStudent.add(studentDetails);
		}
		
		basePlaceHolderClass.setLsOfMathsStudent(lsOfMathsStudent);
		basePlaceHolderClass.setLsOfScienceStudent(lsOfScienceStudent);
	}
	
	
	
	
	
	
	/**
	 * Update Place Holder Domain
	 */
	public static BasePlaceHolderClass createPlaceHolder() {
		BasePlaceHolderClass basePlaceHolderClass = new BasePlaceHolderClass();

		basePlaceHolderClass.setFileHeader(createFileHeader());
		basePlaceHolderClass.setFileFooter(createFileFooter());
		
		basePlaceHolderClass.setMathsDepartmentHeader(createMathsHeader());
		basePlaceHolderClass.setMathsDepartmentFooter(createMathsFooter());
		basePlaceHolderClass.setScienceDepartmentHeader(createScienceHeader());
		basePlaceHolderClass.setScienceDepartmentFooter(createScienceFooter());
		
		createStudentMapDeptWise(basePlaceHolderClass);
		
		
		return basePlaceHolderClass;
	}
	
	
	public static void generateDataFile(BasePlaceHolderClass basePlaceHolderClass,  String templateFilePath, File outputFile){
		VelocityContext velocityContext = new VelocityContext();
		velocityContext.put("data", basePlaceHolderClass);
		
		// Initialize velocity engine
		VelocityEngine velocityEngine = new VelocityEngine();
		Template template;
		try 
		{
			velocityEngine.init();
			template = velocityEngine.getTemplate(templateFilePath);
			OutputStreamWriter wr = new OutputStreamWriter(new FileOutputStream(outputFile), Charset.forName("UTF-8"));
			template.merge(velocityContext, wr);
			wr.close();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		System.out.println("Output File: " + outputFile.getPath());
	}
	
	
	
	
	
	public static void main(String[] args) {
		//Get All Data
		BasePlaceHolderClass basePlaceHolder = createPlaceHolder();
		
		//Generate File
		String velocity_template_path = "\\src\\test\\java\\velocitymanager\\example2\\student.vm";
		String output_file_name = ".\\src\\test\\java\\velocitymanager\\example2\\output.dat";
        generateDataFile(basePlaceHolder, velocity_template_path, new File(output_file_name));

	}

}
